/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package com.jony.parser;

import java.util.*;

public class SQLParser implements SQLParserConstants {

    Sql initParser() {
        try{
            return init();
        }catch (ParseException | TokenMgrError e){
            e.printStackTrace();
        }
        return null;
    }

//SPECIAL_TOKEN : {<COMMENT:("#")+(<DIGIT>|<LETTER>|" ")*("#")+>}

/*表名语法，单个字母或者字母开头带数字的串*/
  final public Token TableName() throws ParseException {Token T;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LETTER:{
      T = jj_consume_token(LETTER);
{if ("" != null) return T;}
      break;
      }
    case NUMERAL:{
      T = jj_consume_token(NUMERAL);
{if ("" != null) return T;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*属性语法，同表名语法*/
  final public Token AttributeName() throws ParseException {Token T;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LETTER:{
      T = jj_consume_token(LETTER);
{if ("" != null) return T;}
      break;
      }
    case NUMERAL:{
      T = jj_consume_token(NUMERAL);
{if ("" != null) return T;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Token ColumnName() throws ParseException {Token T;
    Token S = null;
    T = TableName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      S = AttributeName();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
if (S!= null) {T.image = T.image + "." + S.image;}
        {if ("" != null) return T;}
    throw new Error("Missing return statement in function");
}


  final public String Literal() throws ParseException {Token T;
    StringBuilder sb = new StringBuilder();
    jj_consume_token(QUOTE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIGIT:
      case INTEGER:
      case LETTER:
      case NUMERAL:
      case LPAREN:
      case RPAREN:
      case COMMA:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERAL:{
        T = jj_consume_token(NUMERAL);
sb.append(T.image);
        break;
        }
      case DIGIT:{
        T = jj_consume_token(DIGIT);
sb.append(T.image);
        break;
        }
      case LETTER:{
        T = jj_consume_token(LETTER);
sb.append(T.image);
        break;
        }
      case LPAREN:{
        T = jj_consume_token(LPAREN);
sb.append(T.image);
        break;
        }
      case RPAREN:{
        T = jj_consume_token(RPAREN);
sb.append(T.image);
        break;
        }
      case COMMA:{
        T = jj_consume_token(COMMA);
sb.append(T.image);
        break;
        }
      case DOT:{
        T = jj_consume_token(DOT);
sb.append(T.image);
        break;
        }
      case INTEGER:{
        T = jj_consume_token(INTEGER);
sb.append(T.image);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(QUOTE);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// 语法分析
  final public Sql init() throws ParseException {Sql sql = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:
      case DROP:
      case SELECT:
      case INSERT:
      case UPDATE:
      case DELETE:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:{
        sql = CreateSql();
        break;
        }
      case DROP:{
        sql = DropSql();
        break;
        }
      case SELECT:{
        sql = SelectSql();
        break;
        }
      case INSERT:{
        sql = InsertSql();
        break;
        }
      case DELETE:{
        sql = DeleteSql();
        break;
        }
      case UPDATE:{
        sql = UpdateSql();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return sql;}
    throw new Error("Missing return statement in function");
}


  final public Sql CreateSql() throws ParseException {Token T;
    Sql sql;
    LinkedHashMap<String, String> attributes;
    jj_consume_token(CREATE);
    T = TableName();
    jj_consume_token(LPAREN);
    attributes = AttrTypeList();
    jj_consume_token(RPAREN);
sql = new CreateSql(T.image, attributes);
        {if ("" != null) return sql;}
    throw new Error("Missing return statement in function");
}

  final public LinkedHashMap AttrTypeList() throws ParseException {Token AName;
   Token AType;
   LinkedHashMap<String, String> var = new LinkedHashMap<String, String>();
    AName = AttributeName();
    AType = jj_consume_token(DATATYPE);
var.put(AName.image,AType.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LETTER:
      case NUMERAL:
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      AName = AttributeName();
      AType = jj_consume_token(DATATYPE);
var.put(AName.image,AType.image);
    }
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
}


  final public Sql DropSql() throws ParseException {Token T;
    jj_consume_token(DROP);
    T = TableName();
{if ("" != null) return new DropSql(T.image);}
    throw new Error("Missing return statement in function");
}

// 删除sql
  final public Sql DeleteSql() throws ParseException {Token T;
    List<List<Expression>> clause = null;
    jj_consume_token(DELETE);
    T = TableName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      clause = Condition();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
{if ("" != null) return new DeleteSql(T.image, clause);}
    throw new Error("Missing return statement in function");
}

// 插入sql
  final public Sql InsertSql() throws ParseException {Token T;
    ArrayList<String> attr = null;
    List<List<String>> values;
    Sql sql;
    jj_consume_token(INSERT);
    T = TableName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      attr = AttrList();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALUES:{
      values = tuples();
{if ("" != null) return new InsertSql(T.image, attr, values);}
      break;
      }
    case SELECT:{
      sql = SelectSql();
{if ("" != null) return new InsertSql(T.image, attr, (SelectSql)sql);}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> AttrList() throws ParseException {Token T;
    ArrayList<String> attr = new ArrayList<String>();
    T = AttributeName();
attr.add(T.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      T = AttributeName();
attr.add(T.image);
    }
{if ("" != null) return attr;}
    throw new Error("Missing return statement in function");
}

  final public List<List<String>> tuples() throws ParseException {Token T;
    List<String> tup;
    List<List<String>> values = new ArrayList<List<String>>();
    jj_consume_token(VALUES);
    jj_consume_token(LPAREN);
    tup = Values();
    jj_consume_token(RPAREN);
values.add(tup);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LPAREN);
      tup = Values();
      jj_consume_token(RPAREN);
values.add(tup);
    }
{if ("" != null) return values;}
    throw new Error("Missing return statement in function");
}

  final public String Value() throws ParseException {Token T;
    String S;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULL:{
      T = jj_consume_token(NULL);
{if ("" != null) return T.image;}
      break;
      }
    case QUOTE:{
      S = Literal();
{if ("" != null) return S;}
      break;
      }
    case INTEGER:{
      T = jj_consume_token(INTEGER);
{if ("" != null) return T.image;}
      break;
      }
    case DIGIT:{
      T = jj_consume_token(DIGIT);
{if ("" != null) return T.image;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public List<String> Values() throws ParseException {String T;
    List<String> vals = new ArrayList<String>();
    T = Value();
vals.add(T);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      T = Value();
vals.add(T);
    }
{if ("" != null) return vals;}
    throw new Error("Missing return statement in function");
}

// 查询sql
  final public Sql SelectSql() throws ParseException {Token D = null;
    Sql sql;
    ArrayList<String> selList;
    ArrayList<String> tabList;
    List<List<Expression>> clause = null;
    Token O = null;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DISTINCT:{
      D = jj_consume_token(DISTINCT);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    selList = selectList();
    jj_consume_token(FROM);
    tabList = tableList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      clause = Condition();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDERBY:{
      jj_consume_token(ORDERBY);
      O = ColumnName();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
sql = new SelectSql(D, selList, tabList, clause, (O==null? "": O.image));
        {if ("" != null) return sql;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> selectList() throws ParseException {ArrayList<String> subList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      jj_consume_token(STAR);
{if ("" != null) return new ArrayList<String>(){
            {
                add("*");
            }
        };}
      break;
      }
    case LETTER:
    case NUMERAL:{
      subList = selectSubList();
{if ("" != null) return subList;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> selectSubList() throws ParseException {Token T;
    ArrayList<String> subList = new ArrayList<String>();
    T = ColumnName();
subList.add(T.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      T = ColumnName();
subList.add(T.image);
    }
{if ("" != null) return subList;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> tableList() throws ParseException {Token T;
    ArrayList<String> tabList = new ArrayList<String>();
    T = TableName();
tabList.add(T.image);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      T = TableName();
tabList.add(T.image);
    }
{if ("" != null) return tabList;}
    throw new Error("Missing return statement in function");
}

  final public String term() throws ParseException {Token T;
    String S;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      T = jj_consume_token(INTEGER);
{if ("" != null) return T.image;}
      break;
      }
    case DIGIT:{
      T = jj_consume_token(DIGIT);
{if ("" != null) return T.image;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> exp() throws ParseException {Token T;
  String S;
  ArrayList<String> expList = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      T = jj_consume_token(LPAREN);
expList.add(T.image);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    S = term();
expList.add(S);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        T = jj_consume_token(PLUS);
expList.add(T.image);
        S = term();
expList.add(S);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          T = jj_consume_token(RPAREN);
expList.add(T.image);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        break;
        }
      case MINUS:{
        T = jj_consume_token(MINUS);
expList.add(T.image);
        S = term();
expList.add(S);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          T = jj_consume_token(RPAREN);
expList.add(T.image);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
        }
      case STAR:{
        T = jj_consume_token(STAR);
expList.add(T.image);
        S = term();
expList.add(S);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          T = jj_consume_token(RPAREN);
expList.add(T.image);
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
        }
      case SLASH:{
        T = jj_consume_token(SLASH);
expList.add(T.image);
        S = term();
expList.add(S);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          T = jj_consume_token(RPAREN);
expList.add(T.image);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expList;}
    throw new Error("Missing return statement in function");
}

  final public Expression boolFactor() throws ParseException {Token T;
    String columnName;
    ArrayList<String> expr = new ArrayList<String>();
    String S;
    Expression res = new Expression();
    T = ColumnName();
columnName = T.image;
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIGIT:
    case INTEGER:
    case LPAREN:{
      expr = exp();
      break;
      }
    case QUOTE:{
      S = Literal();
expr.add(S);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
res.setColumnName(columnName);
        res.setExpr(expr);
        {if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public List<Expression> boolTerm() throws ParseException {Expression S;
    List<Expression> cond = new ArrayList<Expression>();
    List<Expression> res = new ArrayList<Expression>();
    S = boolFactor();
res.add(S);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      cond = boolTerm();
res.addAll(cond);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public List<List<Expression>> Condition() throws ParseException {List<Expression> S;
    List<List<Expression>> cond = new ArrayList<List<Expression>>();
    List<List<Expression>> res = new ArrayList<List<Expression>>();
    S = boolTerm();
res.add(S);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      cond = Condition();
res.addAll(cond);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

// 更新sql
  final public Sql UpdateSql() throws ParseException {Token T;
    LinkedHashMap<String, String> mp;
    List<List<Expression>> condition = null;
    jj_consume_token(UPDATE);
    T = TableName();
    jj_consume_token(SET);
    mp = AttrValueMap();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      condition = Condition();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
{if ("" != null) return new UpdateSql(T.image, mp, condition);}
    throw new Error("Missing return statement in function");
}

  final public LinkedHashMap<String, String> AttrValueMap() throws ParseException {Token AttrName;
    String value;
    LinkedHashMap<String, String> mp = new LinkedHashMap();
    AttrName = AttributeName();
    jj_consume_token(EQ);
    value = Value();
mp.put(AttrName.image, value);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      AttrName = AttributeName();
      jj_consume_token(EQ);
      value = Value();
mp.put(AttrName.image, value);
    }
{if ("" != null) return mp;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x18000000,0x18000000,0x0,0x7e000000,0x7e000000,0x2f80,0x2f80,0x18000000,0x0,0x20000,0x20000000,0x8200,0x0,0x0,0x6080000,0x0,0x4000,0x20000,0x40000,0x18000000,0x0,0x0,0x6000000,0x20000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x26000000,0x400000,0x100000,0x20000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x10,0x18,0x18,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x8,0x8,0x2000,0x8,0x0,0x0,0x0,0x80,0x8,0x8,0x0,0x0,0x1e0,0x0,0x0,0x0,0x0,0x1e0,0x2000,0x0,0x0,0x0,0x8,};
	}

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 35; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
